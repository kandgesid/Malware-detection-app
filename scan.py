# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Main_Window.ui'
#
# Created by: PyQt5 UI code generator 5.10.1
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication
import sys
import tensorflow as tf
import numpy as np
from math import sqrt, ceil
import cv2
import os
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping
from visual import VisualWindow
from info import InfoWindow
from delete_window import Ui_Delete_Window
import numpy as np
np.random.seed(1)
result = {}


class Model():
	def __init__(self, model_path):
		self.__saved_model = tf.keras.models.load_model(model_path)
		self.__model_path = model_path
		self.list_families = ['Adialer.C', 'Agent.FYI', 'Allaple.A', 'Allaple.L', 'Alueron.gen!J', 'Autorun.K', 'C2LOP.P', 'C2LOP.gen!g', 'Dialplatform.B', 'Dontovo.A', 'Fakerean', 'Instantaccess',
			'Lolyda.AA1', 'Lolyda.AA2', 'Lolyda.AA3', 'Lolyda.AT', 'Malex.gen!J', 'Obfuscator.AD', 'Rbot!gen', 'Skintrim.N', 'Swizzor.gen!E', 'Swizzor.gen!I', 'VB.AT', 'Wintrim.BX', 'Yuner.A', 'benign']

	def process_path(self, path):
		model = self.__saved_model
		if os.path.isdir(path):
			for item in os.listdir(path):
				if os.path.isfile(item):
					# store result to result dictionary along with path as key.(join(path and item))
					file_path = os.path.join(path, item)
					res = self.is_malicious(file_path, model)
					result[file_path] = res
				elif os.path.isdir(item):
					dir_path = os.path.join(path, item)
					process_path(dir_path)
			# call process_path function on item
		else:
			# call is_malicious on item
			res = self.is_malicious(path)
			result[path] = res

	def is_malicious(self, file):
		model = self.__saved_model
		img = self.convert_to_img(file)
		img = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
		img = cv2.resize(img, (224, 224))
		img_batch = np.expand_dims(img, axis=0)
		prediction = model.predict(img_batch)
		f_name = self.list_families[np.argmax(prediction)]
		return f_name

	def convert_to_img(self, file):
		with open(file, 'rb') as binary_file:
			data = binary_file.read()

		# Data length in bytes
		data_len = len(data)

		# d is a verctor of data_len bytes
		d = np.frombuffer(data, dtype=np.uint8)

		# Assume image shape should be close to square
		sqrt_len = int(ceil(sqrt(data_len)))  # Compute square toot and round up

		# Requiered length in bytes.
		new_len = sqrt_len*sqrt_len

		# Number of bytes to pad (need to add zeros to the end of d)
		pad_len = new_len - data_len

		# Pad d with zeros at the end.
		# padded_d = np.pad(d, (0, pad_len))
		padded_d = np.hstack((d, np.zeros(pad_len, np.uint8)))

		# Reshape 1D array into 2D array with sqrt_len pad_len x sqrt_len (im is going to be a Grayscale image).
		im = np.reshape(padded_d, (sqrt_len, sqrt_len))
		#print(im.shape)
		return im


class Ui_MainWindow(object):
	def open_help(self):
		self.window = QtWidgets.QMainWindow()
		self.ui = InfoWindow()
		self.ui.setupUi(self.window)
		self.window.show()
	def setupUi(self, MainWindow):
		MainWindow.setObjectName("MainWindow")
		MainWindow.resize(900, 800)
		self.centralwidget = QtWidgets.QWidget(MainWindow)
		self.centralwidget.setObjectName("centralwidget")
		self.widget = QtWidgets.QWidget(self.centralwidget)
		self.widget.setGeometry(QtCore.QRect(20, 40, 971, 721))
		self.widget.setObjectName("widget")
		self.pushButton = QtWidgets.QPushButton(self.widget)
		self.pushButton.setGeometry(QtCore.QRect(60, 420, 221, 51))
		self.pushButton.setObjectName("pushButton")
		self.pushButton_2 = QtWidgets.QPushButton(self.widget)
		self.pushButton_2.setGeometry(QtCore.QRect(460, 410, 221, 51))
		self.pushButton_2.setObjectName("pushButton_2")
		self.label = QtWidgets.QLabel(self.widget)
		self.label.setGeometry(QtCore.QRect(10, 150, 251, 171))
		self.label.setText("")
		self.label.setPixmap(QtGui.QPixmap("images/security.jpeg"))
		self.label.setObjectName("label")
		self.label_2 = QtWidgets.QLabel(self.widget)
		self.label_2.setGeometry(QtCore.QRect(270, 150, 241, 161))
		self.label_2.setText("")
		self.label_2.setPixmap(QtGui.QPixmap("images/privacy.jpeg"))
		self.label_2.setObjectName("label_2")
		self.label_4 = QtWidgets.QLabel(self.widget)
		self.label_4.setGeometry(QtCore.QRect(70, 20, 621, 71))
		self.label_4.setStyleSheet("font: 63 43pt \"URW Gothic\";\n"
	"color:#FF9933;")
		self.label_4.setTextFormat(QtCore.Qt.RichText)
		self.label_4.setIndent(100)
		self.label_4.setObjectName("label_4")
		self.label_5 = QtWidgets.QLabel(self.widget)
		self.label_5.setGeometry(QtCore.QRect(90, 330, 141, 41))
		self.label_5.setStyleSheet("font: 57 italic 25pt \"Z003\";\n"
	"color:#FF9933;")
		self.label_5.setObjectName("label_5")
		self.label_6 = QtWidgets.QLabel(self.widget)
		self.label_6.setGeometry(QtCore.QRect(310, 330, 151, 41))
		self.label_6.setStyleSheet("font: 57 italic 25pt \"Z003\";\n"
	"color:#FF9933;")
		self.label_6.setObjectName("label_6")
		self.label_7 = QtWidgets.QLabel(self.widget)
		self.label_7.setGeometry(QtCore.QRect(540, 320, 231, 41))
		self.label_7.setStyleSheet("font: 57 italic 25pt \"Z003\";\n"
	"color:#FF9933;")
		self.label_7.setObjectName("label_7")
		self.label_8 = QtWidgets.QLabel(self.widget)
		self.label_8.setGeometry(QtCore.QRect(-130, -70, 991, 751))
		self.label_8.setText("")
		self.label_8.setPixmap(QtGui.QPixmap("images/background.jpg"))
		self.label_8.setObjectName("label_8")
		self.label_3 = QtWidgets.QLabel(self.widget)
		self.label_3.setGeometry(QtCore.QRect(520, 150, 251, 161))
		self.label_3.setText("")
		self.label_3.setPixmap(QtGui.QPixmap("images/perform.jpeg"))
		self.label_3.setObjectName("label_3")
		self.label_8.raise_()
		self.pushButton.raise_()
		self.pushButton_2.raise_()
		self.label.raise_()
		self.label_2.raise_()
		self.label_4.raise_()
		self.label_5.raise_()
		self.label_6.raise_()
		self.label_7.raise_()
		self.label_3.raise_()
		MainWindow.setCentralWidget(self.centralwidget)
		self.menubar = QtWidgets.QMenuBar(MainWindow)
		self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 20))
		self.menubar.setObjectName("menubar")
		self.menuHelp = QtWidgets.QMenu(self.menubar)
		self.menuHelp.setObjectName("menuHelp")
		MainWindow.setMenuBar(self.menubar)
		self.statusbar = QtWidgets.QStatusBar(MainWindow)
		self.statusbar.setObjectName("statusbar")
		MainWindow.setStatusBar(self.statusbar)
		self.actionView = QtWidgets.QAction(MainWindow)
		icon = QtGui.QIcon()
		icon.addPixmap(QtGui.QPixmap("images/icons/help.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
		self.actionView.setIcon(icon)
		self.actionView.setObjectName("actionView")
		self.actionExit = QtWidgets.QAction(MainWindow)
		self.actionView.triggered.connect(lambda: self.open_help())
		icon1 = QtGui.QIcon()
		icon1.addPixmap(QtGui.QPixmap("images/icons/exit.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
		self.actionExit.setIcon(icon1)
		self.actionExit.setObjectName("actionExit")
		self.menuHelp.addAction(self.actionView)
		self.menuHelp.addAction(self.actionExit)
		self.menubar.addAction(self.menuHelp.menuAction())
		self.pushButton_2.clicked.connect(self.pushButton_2_handler)
		self.retranslateUi(MainWindow)
		self.actionExit.triggered.connect(MainWindow.close)
		QtCore.QMetaObject.connectSlotsByName(MainWindow)
			
	def pushButton_2_handler(self) :
		[filenames, allf] = QtWidgets.QFileDialog.getOpenFileNames()
		model = Model("./VGG16_model_test1")
		for file in filenames :
			model.process_path(file)
		self.window = QtWidgets.QMainWindow()
		self.ui = VisualWindow()
		self.ui.setupUi(self.window)
		win.hide()
		self.window.show()

	def retranslateUi(self, MainWindow):
		_translate = QtCore.QCoreApplication.translate
		MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
		self.pushButton.setText(_translate("MainWindow", "SMART SCAN"))
		self.pushButton_2.setText(_translate("MainWindow", "BROWSE FILES"))
		self.label_4.setText(_translate("MainWindow", "TECH GUARD"))
		self.label_5.setText(_translate("MainWindow", "Security"))
		self.label_6.setText(_translate("MainWindow", "Privacy"))
		self.label_7.setText(_translate("MainWindow", "Performance"))
		self.menuHelp.setTitle(_translate("MainWindow", "Menu"))
		self.actionView.setText(_translate("MainWindow", "Help"))
		self.actionView.setToolTip(_translate("MainWindow", "<html><head/><body><p>Find some help about how to use our App</p></body></html>"))
		self.actionExit.setText(_translate("MainWindow", "Exit"))


class Window(QMainWindow, Ui_MainWindow):
	def __init__(self, parent=None) :
		super().__init__(parent)
		self.setupUi(self)

if __name__ == "__main__" :

	app = QApplication(sys.argv)
	win = Window()
	win.show()
	sys.exit(app.exec())
